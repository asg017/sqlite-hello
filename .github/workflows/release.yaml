name: "Release"
on:
  release:
    types: [published]
permissions:
  contents: read
jobs:
  build-linux-x86_64-extension:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - run: make loadable static
      - uses: actions/upload-artifact@v3
        with:
          name: sqlite-hello-linux-x86_64-extension
          path: dist/*
  build-linux-x86_64-python:
    runs-on: ubuntu-20.04
    needs: [build-linux-x86_64-extension]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: sqlite-hello-linux-x86_64-extension
          path: dist/
      - uses: actions/setup-python@v3
      - run: pip install wheel
      - run: make python
      - run: make datasette
      - uses: actions/upload-artifact@v3
        with:
          name: sqlite-hello-linux-x86_64-wheels
          path: dist/wheels/*.whl
  build-macos-x86_64-extension:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3
      - run: make loadable static
      - uses: actions/upload-artifact@v3
        with:
          name: sqlite-hello-macos-x86_64-extension
          path: dist/*
  build-macos-x86_64-python:
    runs-on: ubuntu-20.04
    needs: [build-macos-x86_64-extension]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: sqlite-hello-macos-x86_64-extension
          path: dist/
      - uses: actions/setup-python@v3
      - run: pip install wheel
      - run: make python
      - run: make datasette
      - uses: actions/upload-artifact@v3
        with:
          name: sqlite-hello-macos-x86_64-wheels
          path: dist/wheels/*.whl
  build-macos-aarch64-extension:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3
      - run: make loadable static CFLAGS="-target arm64-apple-macos11"
      - uses: actions/upload-artifact@v3
        with:
          name: sqlite-hello-macos-aarch64-extension
          path: dist/*
  build-macos-aarch64-python:
    runs-on: ubuntu-20.04
    needs: [build-macos-aarch64-extension]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: sqlite-hello-macos-aarch64-extension
          path: dist/
      - uses: actions/setup-python@v3
      - run: pip install wheel
      - run: make python
      - run: make datasette
      - uses: actions/upload-artifact@v3
        with:
          name: sqlite-hello-macos-aarch64-wheels
          path: dist/wheels/*.whl
  build-windows-x86_64-extension:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v3
      - run: make loadable static
      - uses: actions/upload-artifact@v3
        with:
          name: sqlite-hello-windows-x86_64-extension
          path: dist/*
  build-windows-x86_64-python:
    runs-on: ubuntu-20.04
    needs: [build-windows-x86_64-extension]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v3
        with:
          name: sqlite-hello-windows-x86_64-extension
          path: dist/
      - uses: actions/setup-python@v3
      - run: pip install wheel
      - run: make python
      - run: make datasette
      - uses: actions/upload-artifact@v3
        with:
          name: sqlite-hello-windows-x86_64-wheels
          path: dist/wheels/*.whl
  upload-deno:
    needs:
      [
        build-linux-x86_64-extension,
        build-macos-x86_64-extension,
        build-macos-aarch64-extension,
        build-windows-x86_64-extension,
      ]
    outputs:
      deno-checksums: ${{ steps.deno-assets.outputs.result }}
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v2
      - id: deno-assets
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const script = require('.github/workflows/upload-deno-assets.js')
            return await script({github, context})
  upload-extensions:
    needs:
      [
        build-linux-x86_64-extension,
        build-macos-x86_64-extension,
        build-macos-aarch64-extension,
        build-windows-x86_64-extension,
      ]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      checksums: ${{ steps.upload-spm.outputs.asset-checksums }}
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v2
      - uses: asg017/upload-spm@main
        id: upload-spm
        with:
          name: sqlite-hello
          github-token: ${{ secrets.GITHUB_TOKEN }}
          platforms: |
            macos-x86_64:   sqlite-hello-macos-x86_64-extension/*
            macos-aarch64:  sqlite-hello-macos-aarch64-extension/*
            linux-x86_64:   sqlite-hello-linux-x86_64-extension/*
            windows-x86_64: sqlite-hello-windows-x86_64-extension/*
  upload-checksums:
    needs: [upload-extensions, upload-deno]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      checksums: ${{ steps.upload-checksums.outputs.result }}
    steps:
      - id: upload-checksums
        uses: actions/github-script@v6
        env:
          CHECKSUMS: "${{ needs.upload-extensions.outputs.checksums }}\n${{ needs.upload-deno.outputs.deno-checksums }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            const { owner, repo } = context.repo;
            const release = await github.rest.repos.getReleaseByTag({
              owner,
              repo,
              tag: process.env.GITHUB_REF.replace("refs/tags/", ""),
            });
            const release_id = release.data.id;
            github.rest.repos.uploadReleaseAsset({
              owner,
              repo,
              release_id,
              name: "checksums.txt",
              data: process.env.CHECKSUMS,
            });
            return process.env.CHECKSUMS
  upload-hex:
    runs-on: ubuntu-latest
    needs: [upload-extensions]
    steps:
      - uses: actions/checkout@v2
      - uses: erlef/setup-beam@v1
        with:
          otp-version: "24"
          rebar3-version: "3.16.1"
          elixir-version: "1.14"
      - run: ./scripts/elixir_generate_checksum.sh "${{ needs.upload-extensions.outputs.checksums }}"
      - run: mix deps.get
        working-directory: ./bindings/elixir
      - run: mix compile --docs
        working-directory: ./bindings/elixir
      - run: mix hex.publish --yes
        working-directory: ./bindings/elixir
        env:
          HEX_API_KEY: ${{ secrets.HEX_API_KEY }}
        working-directory: ./bindings/elixir
  upload-crate:
    runs-on: ubuntu-latest
    needs: [upload-extensions]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - run: cargo publish --no-verify
        working-directory: ./bindings/rust
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
  upload-gem:
    needs:
      [
        build-linux-x86_64-extension,
        build-macos-x86_64-extension,
        build-macos-aarch64-extension,
        build-windows-x86_64-extension,
      ]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2
      - run: |
          rm bindings/ruby/lib/*.{dylib,so,dll} || true
          cp sqlite-hello-macos-x86_64-extension/*.dylib bindings/ruby/lib
          gem -C bindings/ruby build -o x86_64-darwin.gem sqlite_hello.gemspec
        env:
          PLATFORM: x86_64-darwin
      - run: |
          rm bindings/ruby/lib/*.{dylib,so,dll} || true
          cp sqlite-hello-macos-aarch64-extension/*.dylib bindings/ruby/lib
          gem -C bindings/ruby build -o arm64-darwin.gem sqlite_hello.gemspec
        env:
          PLATFORM: arm64-darwin
      - run: |
          rm bindings/ruby/lib/*.{dylib,so,dll} || true
          cp sqlite-hello-linux-x86_64-extension/*.so bindings/ruby/lib
          gem -C bindings/ruby build -o x86_64-linux.gem sqlite_hello.gemspec
        env:
          PLATFORM: x86_64-linux
      - run: |
          rm bindings/ruby/lib/*.{dylib,so,dll} || true
          cp sqlite-hello-windows-x86_64-extension/*.dll bindings/ruby/lib
          gem -C bindings/ruby build -o x64-mingw32.gem sqlite_hello.gemspec
        env:
          PLATFORM: x64-mingw32
      - run: |
          gem push bindings/ruby/x86_64-darwin.gem
          gem push bindings/ruby/arm64-darwin.gem
          gem push bindings/ruby/x86_64-linux.gem
          gem push bindings/ruby/x64-mingw32.gem
        env:
          GEM_HOST_API_KEY: ${{ secrets.GEM_HOST_API_KEY }}
  upload-npm:
    needs:
      [
        build-linux-x86_64-extension,
        build-macos-x86_64-extension,
        build-macos-aarch64-extension,
        build-windows-x86_64-extension,
      ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v2
      - run: |
          cp sqlite-hello-linux-x86_64-extension/*.so bindings/node/sqlite-hello-linux-x64/lib/
          cp sqlite-hello-macos-x86_64-extension/*.dylib bindings/node/sqlite-hello-darwin-x64/lib/
          cp sqlite-hello-macos-aarch64-extension/*.dylib bindings/node/sqlite-hello-darwin-arm64/lib/
          cp sqlite-hello-windows-x86_64-extension/*.dll bindings/node/sqlite-hello-windows-x64/lib/
      - uses: actions/setup-node@v3
        with:
          node-version: "16"
          registry-url: "https://registry.npmjs.org"
      - name: Publish NPM sqlite-hello-linux-x64
        working-directory: bindings/node/sqlite-hello-linux-x64
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish NPM sqlite-hello-darwin-x64
        working-directory: bindings/node/sqlite-hello-darwin-x64
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish NPM sqlite-hello-darwin-arm64
        working-directory: bindings/node/sqlite-hello-darwin-arm64
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish NPM sqlite-hello-windows-x64
        working-directory: bindings/node/sqlite-hello-windows-x64
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Publish NPM sqlite-hello
        working-directory: bindings/node/sqlite-hello
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
  upload-pypi:
    needs:
      [
        build-linux-x86_64-python,
        build-macos-x86_64-python,
        build-macos-aarch64-python,
        build-windows-x86_64-python,
      ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: sqlite-hello-linux-x86_64-wheels
          path: dist
      - uses: actions/download-artifact@v3
        with:
          name: sqlite-hello-macos-x86_64-wheels
          path: dist
      - uses: actions/download-artifact@v3
        with:
          name: sqlite-hello-macos-aarch64-wheels
          path: dist
      - uses: actions/download-artifact@v3
        with:
          name: sqlite-hello-windows-x86_64-wheels
          path: dist
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
