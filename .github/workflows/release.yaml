name: "Release"
on:
  release:
    types: [published]
permissions:
  contents: read
jobs:
  build-linux-x86_64-extension:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - run: make loadable static
      - uses: actions/upload-artifact@v4
        with:
          name: sqlite-hello-linux-x86_64-extension
          path: dist/*
  build-macos-x86_64-extension:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3
      - run: make loadable static
      - uses: actions/upload-artifact@v4
        with:
          name: sqlite-hello-macos-x86_64-extension
          path: dist/*
  build-macos-aarch64-extension:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3
      - run: make loadable static CFLAGS="-target arm64-apple-macos11"
      - uses: actions/upload-artifact@v4
        with:
          name: sqlite-hello-macos-aarch64-extension
          path: dist/*
  build-windows-x86_64-extension:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v3
      - run: make loadable static
      - uses: actions/upload-artifact@v4
        with:
          name: sqlite-hello-windows-x86_64-extension
          path: dist/*
  dist:
    runs-on: ubuntu-latest
    needs:
      [
        build-linux-x86_64-extension,
        build-macos-x86_64-extension,
        build-macos-aarch64-extension,
        build-windows-x86_64-extension,
      ]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v4
        with:
          name: sqlite-hello-linux-x86_64-extension
          path: dist/linux-x86_64
      - uses: actions/download-artifact@v4
        with:
          name: sqlite-hello-macos-x86_64-extension
          path: dist/macos-x86_64
      - uses: actions/download-artifact@v4
        with:
          name: sqlite-hello-macos-aarch64-extension
          path: dist/macos-aarch64
      - uses: actions/download-artifact@v4
        with:
          name: sqlite-hello-windows-x86_64-extension
          path: dist/windows-x86_64
      - run: |
          curl -L https://github.com/asg017/sqlite-dist/releases/download/v0.0.1-alpha.2/sqlite-dist-x86_64-unknown-linux-gnu.tar.xz \
            | tar xfJ - --strip-components 1
      - run: ./sqlite-dist ./sqlite-dist.toml --input dist/ --output distx/
      - run: |
          gh release upload ${{ github.ref_name }} \
            distx/github_releases/* \
            distx/spm/* \
            distx/sqlpkg/* \
            distx/checksums.txt \
            distx/sqlite-dist-manifest.json \
            distx/install.sh
        env:
          GH_TOKEN: ${{ github.token }}
      - name: Install node
        uses: actions/setup-node@v3
        with:
          node-version: "16"
          registry-url: "https://registry.npmjs.org"
      - run: |
          npm publish --access public distx/npm/sqlite-hello-darwin-arm64.tar.gz
          npm publish --access public distx/npm/sqlite-hello-darwin-x64.tar.gz
          npm publish --access public distx/npm/sqlite-hello-linux-x64.tar.gz
          npm publish --access public distx/npm/sqlite-hello-windows-x64.tar.gz
          npm publish --access public distx/npm/sqlite-hello.tar.gz
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2
      - run: |
          for file in distx/gem; do
            gem push  "$file"
          done
        env:
          GEM_HOST_API_KEY: ${{ secrets.GEM_HOST_API_KEY }}
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
          packages-dir: distx/pip
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
          packages-dir: distx/datasette
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}
          skip-existing: true
          packages-dir: distx/sqlite_utils

  #upload-hex:
  #  runs-on: ubuntu-latest
  #  needs: [upload-extensions]
  #  steps:
  #    - uses: actions/checkout@v2
  #    - uses: erlef/setup-beam@v1
  #      with:
  #        otp-version: "24"
  #        rebar3-version: "3.16.1"
  #        elixir-version: "1.14"
  #    - run: ./scripts/elixir_generate_checksum.sh "${{ needs.upload-extensions.outputs.checksums }}"
  #    - run: mix deps.get
  #      working-directory: ./bindings/elixir
  #    - run: mix compile --docs
  #      working-directory: ./bindings/elixir
  #    - run: mix hex.publish --yes
  #      working-directory: ./bindings/elixir
  #      env:
  #        HEX_API_KEY: ${{ secrets.HEX_API_KEY }}
  #upload-crate:
  #  runs-on: ubuntu-latest
  #  needs: [upload-extensions]
  #  steps:
  #    - uses: actions/checkout@v2
  #    - uses: actions-rs/toolchain@v1
  #      with:
  #        toolchain: stable
  #    - run: cargo publish --no-verify
  #      working-directory: ./bindings/rust
  #      env:
  #        CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
