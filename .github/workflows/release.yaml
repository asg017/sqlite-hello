name: "Release"
on:
  release:
    types: [published]
permissions:
  contents: read
jobs:
  build-linux-x86_64-extension:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v3
      - run: make loadable static
      - uses: actions/upload-artifact@v3
        with:
          name: sqlite-hello-linux-x86_64-extension
          path: dist/*
  build-macos-x86_64-extension:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3
      - run: make loadable static
      - uses: actions/upload-artifact@v3
        with:
          name: sqlite-hello-macos-x86_64-extension
          path: dist/*
  build-macos-aarch64-extension:
    runs-on: macos-11
    steps:
      - uses: actions/checkout@v3
      - run: make loadable static CFLAGS="-target arm64-apple-macos11"
      - uses: actions/upload-artifact@v3
        with:
          name: sqlite-hello-macos-aarch64-extension
          path: dist/*
  build-windows-x86_64-extension:
    runs-on: windows-2019
    steps:
      - uses: actions/checkout@v3
      - run: make loadable static
      - uses: actions/upload-artifact@v3
        with:
          name: sqlite-hello-windows-x86_64-extension
          path: dist/*
  upload-extensions:
    needs:
      [
        build-linux-x86_64-extension,
        build-macos-x86_64-extension,
        build-macos-aarch64-extension,
        build-windows-x86_64-extension,
      ]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/download-artifact@v2
      - name: Upload Deno Assets
        id: deno-assets
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const script = require('.github/workflows/upload-deno-assets.js')
            await script({github, context})
      - uses: asg017/upload-spm@main
        id: upload-spm
        with:
          name: sqlite-hello
          github-token: ${{ secrets.GITHUB_TOKEN }}
          platforms: |
            macos-x86_64:   sqlite-hello-macos-x86_64-extension/*
            macos-aarch64:  sqlite-hello-macos-aarch64-extension/*
            linux-x86_64:   sqlite-hello-linux-x86_64-extension/*
            windows-x86_64: sqlite-hello-windows-x86_64-extension/*

      - uses: actions/github-script@v6
        env:
          CHECKSUMS: "${{ steps.upload-spm.outputs.asset-checksums }}\n${{ steps.deno-assets.outputs.result }}"
        with:
          script: |
            const { owner, repo } = context.repo;
            const release = await github.rest.repos.getReleaseByTag({
              owner,
              repo,
              tag: process.env.GITHUB_REF.replace("refs/tags/", ""),
            });
            const release_id = release.data.id;
            github.rest.repos.uploadReleaseAsset({
              owner,
              repo,
              release_id,
              name: "checksums.txt",
              data: process.env.CHECKSUMS,
            });
  upload-crate:
    runs-on: ubuntu-latest
    needs: [upload-extensions]
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
      - run: cargo publish
        working-directory: ./bindings/rust
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
  upload-gem:
    needs:
      [
        build-linux-x86_64-extension,
        build-macos-x86_64-extension,
        build-macos-aarch64-extension,
        build-windows-x86_64-extension,
      ]
    permissions:
      contents: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2
      - run: |
          rm bindings/ruby/lib/*.{dylib,so,dll} || true
          cp sqlite-hello-macos-x86_64-extension/*.dylib bindings/ruby/lib
          gem -C bindings/ruby build -o x86_64-darwin.gem sqlite_hello.gemspec
        env:
          PLATFORM: x86_64-darwin
      - run: |
          rm bindings/ruby/lib/*.{dylib,so,dll} || true
          cp sqlite-hello-macos-aarch64-extension/*.dylib bindings/ruby/lib
          gem -C bindings/ruby build -o arm64-darwin.gem sqlite_hello.gemspec
        env:
          PLATFORM: arm64-darwin
      - run: |
          rm bindings/ruby/lib/*.{dylib,so,dll} || true
          cp sqlite-hello-linux-x86_64-extension/*.so bindings/ruby/lib
          gem -C bindings/ruby build -o x86_64-linux.gem sqlite_hello.gemspec
        env:
          PLATFORM: x86_64-linux
      - run: |
          rm bindings/ruby/lib/*.{dylib,so,dll} || true
          cp sqlite-hello-windows-x86_64-extension/*.dll bindings/ruby/lib
          gem -C bindings/ruby build -o x64-mingw32.gem sqlite_hello.gemspec
        env:
          PLATFORM: x64-mingw32
      - run: |
          gem push bindings/ruby/x86_64-darwin.gem
          gem push bindings/ruby/arm64-darwin.gem
          gem push bindings/ruby/x86_64-linux.gem
          gem push bindings/ruby/x64-mingw32.gem
        env:
          GEM_HOST_API_KEY: ${{ secrets.GEM_HOST_API_KEY }}
